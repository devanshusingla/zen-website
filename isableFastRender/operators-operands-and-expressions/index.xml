<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operators, Operands, and Expressions on Zen</title>
    <link>http://localhost:1313/zen-website/operators-operands-and-expressions/</link>
    <description>Recent content in Operators, Operands, and Expressions on Zen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://localhost:1313/zen-website/operators-operands-and-expressions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overriding Operators</title>
      <link>http://localhost:1313/zen-website/operators-operands-and-expressions/overriding-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/operators-operands-and-expressions/overriding-operators/</guid>
      <description>Zen allows operator overriding through a combination of functions and annotations.
All the operators in Zen are dispatched to a function call. The ZenKernel.evaluate(...) function finds a suitable handler for the operator defined within the operand object and dispatches it. In other words, the compiler translates expressions with operators to equivalent ZenKernel.evaluate(...) calls.
For example, in the HashMap class the following annotation overrides the subscript operator.
@Operator symbol=&#39;[]&#39; function getValue(key) .</description>
    </item>
    
    <item>
      <title>Types of Operators</title>
      <link>http://localhost:1313/zen-website/operators-operands-and-expressions/types-of-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/operators-operands-and-expressions/types-of-operators/</guid>
      <description>In this lecture, we&amp;rsquo;ll learn about the types of operators based on the number of operands they expect.
A common way to categorize Zenâ€™s operators is by the number of operands the operator expect.
There are three types of operators based on the number of operands they accept.
 Unary Operators
 Binary Operators
 Ternary Operators
  Unary Operators Unary operators are operators that expect one operand.</description>
    </item>
    
    <item>
      <title>Understanding Operators</title>
      <link>http://localhost:1313/zen-website/operators-operands-and-expressions/understanding-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/operators-operands-and-expressions/understanding-operators/</guid>
      <description>In this lecture, you will learn about operators.
An operator is a special symbol or a keyword that performs a mathemtical operation or a specific operation.
Generally, an operator expects one, two, or three values known as operands.
You must always remember, an operator always calculates and returns a result.</description>
    </item>
    
    <item>
      <title>Working with Arithmetic Operators</title>
      <link>http://localhost:1313/zen-website/operators-operands-and-expressions/working-with-arithmetic-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/zen-website/operators-operands-and-expressions/working-with-arithmetic-operators/</guid>
      <description>In this section, you will learn about the arithmetic operators in Zen.
 Please note that the operators described in this section are with respect to the Integer8, Integer16, Integer32, Integer64, Decimal32 and Decimal64 data types. For behavior specific to other data types, please refer the documentation.
 You can perform addition, subtraction, multiplication, and division with the arithmetic operators. They are similar to operators in basic mathematics.
   Operator Description     + Addition   - Subtraction   * Multiplication   / Division (returns quotient)   % Division (returns remainder)    Addition The addition operator, written as plus + accepts two operands.</description>
    </item>
    
  </channel>
</rss>